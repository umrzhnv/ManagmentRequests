@page "/buildings/delete"
@using Microsoft.EntityFrameworkCore
@using ManagmentRequests.Components.Models
@inject IDbContextFactory<ManagmentRequests.Data.ManagmentRequestsContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Удалить здание</PageTitle>

<h1>Удалить</h1>

<p>Вы уверены?</p>
<div>
    <h2>Здание</h2>
    <hr />
    @if (building is null)
    {
        <p><em>Загрузка...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Наименование</dt>
            <dd class="col-sm-10">@building.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Адрес</dt>
            <dd class="col-sm-10">@building.Address</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Контактное лицо</dt>
            <dd class="col-sm-10">@building.ContactName</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Номер телефона</dt>
            <dd class="col-sm-10">@building.PhoneNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Почтовый адрес</dt>
            <dd class="col-sm-10">@building.Email</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Кол-во лифтов</dt>
            <dd class="col-sm-10">@building.CountsOfElevators</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Заметки</dt>
            <dd class="col-sm-10">@building.Notes</dd>
        </dl>
        <EditForm method="post" Model="building" OnValidSubmit="DeleteBuilding" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(building is null)">Удалить</button> |
            <a href="/buildings">Назад</a>
        </EditForm>
    }
</div>

@code {
    private Building? building;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        building = await context.Buildings.FirstOrDefaultAsync(m => m.ID == ID);

        if (building is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteBuilding()
    {
        using var context = DbFactory.CreateDbContext();
        context.Buildings.Remove(building!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/buildings");
    }
}
