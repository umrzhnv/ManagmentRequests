@page "/buildings/edit"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using ManagmentRequests.Components.Models
@inject IDbContextFactory<ManagmentRequests.Data.ManagmentRequestsContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактировать здание</PageTitle>

<h1>Редактировать</h1>

<h2>Здание</h2>
<hr />
@if (Building is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Building" OnValidSubmit="UpdateBuilding" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Building.ID" value="@Building.ID" />
                <div class="mb-3">
                    <label for="name" class="form-label">Наименование:</label>
                    <InputText id="name" @bind-Value="Building.Name" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Building.Name" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="address" class="form-label">Адрес:</label>
                    <InputText id="address" @bind-Value="Building.Address" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Building.Address" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="contactname" class="form-label">Контактное лицо:</label>
                    <InputText id="contactname" @bind-Value="Building.ContactName" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Building.ContactName" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="phonenumber" class="form-label">Номер телефона:</label>
                    <InputText id="phonenumber" @bind-Value="Building.PhoneNumber" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Building.PhoneNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="email" class="form-label">Почтовый адрес:</label>
                    <InputText id="email" @bind-Value="Building.Email" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Building.Email" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="countsofelevators" class="form-label">Кол-во лифтов:</label>
                    <InputNumber id="countsofelevators" @bind-Value="Building.CountsOfElevators" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Building.CountsOfElevators" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="notes" class="form-label">Заметки:</label>
                    <InputText id="notes" @bind-Value="Building.Notes" class="form-control" />
                    <ValidationMessage For="() => Building.Notes" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/buildings">Назад</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ID { get; set; }

    [SupplyParameterFromForm]
    private Building? Building { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Building ??= await context.Buildings.FirstOrDefaultAsync(m => m.ID == ID);

        if (Building is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBuilding()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Building!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BuildingExists(Building!.ID))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/buildings");
    }

    private bool BuildingExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Buildings.Any(e => e.ID == id);
    }
}
