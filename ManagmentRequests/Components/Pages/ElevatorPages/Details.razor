@page "/elevators/details"
@using Microsoft.EntityFrameworkCore
@using ManagmentRequests.Components.Models
@inject IDbContextFactory<ManagmentRequests.Data.ManagmentRequestsContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Описание лифтов</PageTitle>

<h1>Описание</h1>

<div>
    <h2>Лифт</h2>
    <hr />
    @if (elevator is null)
    {
        <p><em>Загрузка...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Здание</dt>
            <dd class="col-sm-10">@elevator.Building.Name</dd>
            <dt class="col-sm-2">Серийный номер</dt>
            <dd class="col-sm-10">@elevator.SerialNumber</dd>
            <dt class="col-sm-2">Производитель</dt>
            <dd class="col-sm-10">@elevator.Manufacture</dd>
            <dt class="col-sm-2">Модель</dt>
            <dd class="col-sm-10">@elevator.Model</dd>
            <dt class="col-sm-2">Грузоподъемность (кг)</dt>
            <dd class="col-sm-10">@elevator.Capacity</dd>
            <dt class="col-sm-2">Заметки</dt>
            <dd class="col-sm-10">@elevator.Notes</dd>
        </dl>
        <div>
            <a href="@($"/elevators/edit?id={elevator.ID}")">Редактировать</a> |
            <a href="@($"/elevators")">Назад</a>
        </div>
    }
</div>

@code {
    private Elevator? elevator;
    //private List<string> buildings = new List<string>(); // Инициализируем список


    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        elevator = await context.Elevators
        .Include(g=>g.Building)
        .FirstOrDefaultAsync(g => g.ID == ID);

        if (elevator is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        
    }

    
}
