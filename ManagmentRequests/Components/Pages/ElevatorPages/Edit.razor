@page "/elevators/edit"
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using ManagmentRequests.Components.Models
@inject IDbContextFactory<ManagmentRequests.Data.ManagmentRequestsContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактировать лифты</PageTitle>

<h1>Редактировать</h1>

<h2>Лифт</h2>
<hr />
@if (Elevator is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Elevator" OnValidSubmit="UpdateElevator" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Elevator.ID" value="@Elevator.ID" />
                <div class="mb-3">
                    <label for="buildingid" class="form-label">Здание:</label>
                    <InputSelect id="buildingid" @bind-Value="Elevator.BuildingID" class="form-control" aria-required="true">
                        @foreach (var building in buildings)
                        {
                            <option value="@building.ID">@building.Name</option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => Elevator.BuildingID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="serialnumber" class="form-label">Серийный номер:</label>
                    <InputText id="serialnumber" @bind-Value="Elevator.SerialNumber" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Elevator.SerialNumber" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="manufacture" class="form-label">Производитель:</label>
                    <InputText id="manufacture" @bind-Value="Elevator.Manufacture" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Elevator.Manufacture" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="model" class="form-label">Модель:</label>
                    <InputText id="model" @bind-Value="Elevator.Model" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Elevator.Model" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="capacity" class="form-label">Грузоподъемность (кг):</label>
                    <InputNumber id="capacity" @bind-Value="Elevator.Capacity" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Elevator.Capacity" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="notes" class="form-label">Заметки:</label>
                    <InputText id="notes" @bind-Value="Elevator.Notes" class="form-control" />
                    <ValidationMessage For="() => Elevator.Notes" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/elevators">Назад</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ID { get; set; }

    //[SupplyParameterFromForm]
    private Elevator? Elevator { get; set; }
    List<Building> buildings = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Elevator = await context.Elevators.FirstOrDefaultAsync(m => m.ID == ID);
        buildings = await context.Buildings.ToListAsync();
        if (Elevator is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task UpdateElevator()
    {
        using var context = DbFactory.CreateDbContext();

        var existingElevator = await context.Elevators.FindAsync(Elevator!.ID);

        if (existingElevator != null) {
            existingElevator.BuildingID = Elevator.BuildingID;
            existingElevator.SerialNumber = Elevator.SerialNumber;
            existingElevator.Manufacture = Elevator.Manufacture;
            existingElevator.Model = Elevator.Model;
            existingElevator.Capacity = Elevator.Capacity;
            existingElevator.Notes = Elevator.Notes;

            try {
                await context.SaveChangesAsync();
            }
            catch {
                if (!ElevatorExists(Elevator!.ID)) {
                    NavigationManager.NavigateTo("notfound");
                }
                else {
                    throw;
                }
            }
        }

        NavigationManager.NavigateTo("/elevators");
    }

    private bool ElevatorExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Elevators.Any(e => e.ID == id);
    }
}
