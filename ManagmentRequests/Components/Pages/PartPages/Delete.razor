@page "/parts/delete"
@using Microsoft.EntityFrameworkCore
@using ManagmentRequests.Components.Models
@inject IDbContextFactory<ManagmentRequests.Data.ManagmentRequestsContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Удалить запчасть</PageTitle>

<h1>Удалить</h1>

<p>Вы уверены?</p>
<div>
    <h2>Запчасть</h2>
    <hr />
    @if (part is null)
    {
        <p><em>Загрузка...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Наименование</dt>
            <dd class="col-sm-10">@part.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Серийный номер</dt>
            <dd class="col-sm-10">@part.SerialNumber</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Цена</dt>
            <dd class="col-sm-10">@part.Price</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Количество</dt>
            <dd class="col-sm-10">@part.Quantity</dd>
        </dl>
        <EditForm method="post" Model="part" OnValidSubmit="DeletePart" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(part is null)">Удалить</button> |
            <a href="/parts">Назад</a>
        </EditForm>
    }
</div>

@code {
    private Part? part;

    [SupplyParameterFromQuery]
    private int ID { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        part = await context.Parts.FirstOrDefaultAsync(m => m.ID == ID);

        if (part is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeletePart()
    {
        using var context = DbFactory.CreateDbContext();
        context.Parts.Remove(part!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/parts");
    }
}
