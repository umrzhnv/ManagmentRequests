@page "/servicerequestcs/edit" 
@rendermode InteractiveServer
@using Microsoft.EntityFrameworkCore
@using ManagmentRequests.Components.Models
@inject IDbContextFactory<ManagmentRequests.Data.ManagmentRequestsContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Редактировать заявки</PageTitle>

<h1>Редактировать</h1>

<h2>Заявка</h2>
<hr />
@if (ServiceRequestcs is null)
{
    <p><em>Загрузка...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="ServiceRequestcs" OnValidSubmit="UpdateServiceRequestcs" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="ServiceRequestcs.ID" value="@ServiceRequestcs.ID" />
                <div class="mb-3">
                    <label for="elevatorid" class="form-label">Серийный номер лифта:</label>
                    <InputSelect id="elevatorid" @bind-Value="ServiceRequestcs.ElevatorID" class="form-control" aria-required="true">
                        @foreach(var elevator in elevators){
                            <Option value="@elevator.ID">@elevator.SerialNumber</Option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => ServiceRequestcs.ElevatorID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="partid" class="form-label">Запчасть:</label>
                    <InputSelect id="partid" @bind-Value="ServiceRequestcs.PartID" class="form-control" aria-required="true">
                        @foreach (var part in parts){
                            <Option value="@part.ID">@part.Name</Option>
                        }  
                    </InputSelect>
                    <ValidationMessage For="() => ServiceRequestcs.PartID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="date" class="form-label">Дата поступления:</label>
                    <InputDate id="date" @bind-Value="ServiceRequestcs.Date" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => ServiceRequestcs.Date" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Описание:</label>
                    <InputText id="description" @bind-Value="ServiceRequestcs.Description" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => ServiceRequestcs.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="type" class="form-label">Тип:</label>
                    <InputText id="type" @bind-Value="ServiceRequestcs.Type" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => ServiceRequestcs.Type" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="status" class="form-label">Статус:</label>
                    <InputText id="status" @bind-Value="ServiceRequestcs.Status" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => ServiceRequestcs.Status" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="assignedtechnicianid" class="form-label">Ответственный техник:</label>
                    <InputSelect id="assignedtechnicianid" @bind-Value="ServiceRequestcs.AssignedTechnicianID" class="form-control" >
                        @foreach (var technician in technicians){
                            <Option value="@technician.ID">@technician.Fullname</Option>
                        }
                    </InputSelect>
                    <ValidationMessage For="() => ServiceRequestcs.AssignedTechnicianID" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="priority" class="form-label">Приоритет:</label>
                    <InputText id="priority" @bind-Value="ServiceRequestcs.Priority" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => ServiceRequestcs.Priority" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="resolutiondate" class="form-label">ResolutionDate:</label>
                    <InputDate id="resolutiondate" @bind-Value="ServiceRequestcs.ResolutionDate" class="form-control" />
                    <ValidationMessage For="() => ServiceRequestcs.ResolutionDate" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="notes" class="form-label">Заметки:</label>
                    <InputText id="notes" @bind-Value="ServiceRequestcs.Notes" class="form-control" />
                    <ValidationMessage For="() => ServiceRequestcs.Notes" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Сохранить</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/servicerequestcs">Назад</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int ID { get; set; }
    private ServiceRequestcs? ServiceRequestcs { get; set; }
    List<Elevator> elevators = new();
    List<Technician> technicians = new();
    List<Part> parts = new(); 


    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        ServiceRequestcs= await context.ServiceRequestcss
            .Include(g=>g.Elevator)
            .Include(g=>g.Part)
            .Include(g=>g.AssignedTechnician)
            .FirstOrDefaultAsync(m => m.ID == ID);

        if (ServiceRequestcs is null)
        {
            NavigationManager.NavigateTo("notfound");
            return;
        }

        elevators = await context.Elevators.ToListAsync();
        parts=await context.Parts.ToListAsync();
        technicians = await context.Technicians.ToListAsync();
    }

    private async Task UpdateServiceRequestcs()
    {
        using var context = DbFactory.CreateDbContext();
        var existingReq = await context.ServiceRequestcss.FindAsync(ServiceRequestcs!.ID);

        if (existingReq != null)
        {
            existingReq.ElevatorID = ServiceRequestcs.ElevatorID;
            existingReq.PartID = ServiceRequestcs.PartID;
            existingReq.Date = ServiceRequestcs.Date;
            existingReq.Description = ServiceRequestcs.Description;
            existingReq.Type = ServiceRequestcs.Type;
            existingReq.Status = ServiceRequestcs.Status;
            existingReq.AssignedTechnicianID = ServiceRequestcs.AssignedTechnicianID;
            existingReq.Priority = ServiceRequestcs.Priority;
            existingReq.ResolutionDate = ServiceRequestcs.ResolutionDate;
            existingReq.Notes = ServiceRequestcs.Notes;

            try
            {
                await context.SaveChangesAsync();
            }
            catch (DbUpdateConcurrencyException)
            {
                if (!ServiceRequestcsExists(ServiceRequestcs.ID))
                {
                    NavigationManager.NavigateTo("Не найдено");
                }
                else
                {
                    throw;
                }
            }
        }

        NavigationManager.NavigateTo("/servicerequestcs");

    }

    

    private bool ServiceRequestcsExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.ServiceRequestcss.Any(e => e.ID == id);
    }
}